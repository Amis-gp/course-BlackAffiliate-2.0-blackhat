import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';

const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

export async function POST(request: NextRequest) {
  console.log('--- REMIND API CALLED ---');
  try {
    const { requestId } = await request.json();
    console.log('Received requestId:', requestId);
    
    const registrationRequest = await db.registrationRequest.findUnique({
      where: { id: requestId }
    });
    
    if (!registrationRequest) {
      return NextResponse.json({ success: false, message: '–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }, { status: 404 });
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤ Telegram
    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      const message = `üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é</b>\n\nüìß Email: ${registrationRequest.email}\nüë§ –Ü–º'—è: ${registrationRequest.name}\nüìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É: ${new Date(registrationRequest.createdAt).toLocaleDateString('uk-UA')}\n\n‚è∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–≥–∞–¥—É—î –ø—Ä–æ —Å–µ–±–µ —Ç–∞ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è`;
      console.log('Sending Telegram message:', message);

      try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
          })
        });
        
        const responseData = await response.json();
        console.log('Telegram API response:', responseData);

        if (response.ok) {
          return NextResponse.json({ success: true, message: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É' });
        } else {
          console.error('Telegram API error:', responseData);
          return NextResponse.json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è' }, { status: 500 });
        }
      } catch (error) {
        console.error('Failed to send Telegram notification:', error);
        return NextResponse.json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è' }, { status: 500 });
      }
    } else {
      return NextResponse.json({ success: true, message: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (Telegram –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π)' });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
    return NextResponse.json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}